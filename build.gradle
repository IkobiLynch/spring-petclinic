plugins {
  id 'java'
  id 'org.springframework.boot' version '3.2.0'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.graalvm.buildtools.native' version '0.9.28'
  id 'io.spring.javaformat' version '0.0.41'
  id "io.spring.nohttp" version "0.0.11"
  id 'pl.allegro.tech.build.axion-release' version "1.13.12"
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.javaformat'
apply plugin: 'maven-publish'

gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

group = 'org.springframework.samples'
version = scmVersion.version

java {
  sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
  maven {
    
    url 'https://repo1.maven.org/maven2/'
    // url 'http://localhost:8084/repository/Proxy_Nexus_Tasks/'
    //allowInsecureProtocol = true
  }
}

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.3.2"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
  checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.41'
  checkstyle 'com.puppycrawl.tools:checkstyle:10.12.5'
}

tasks.named('test') {
  useJUnitPlatform()
}

checkstyle {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

checkstyleNohttp {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

checkstyleAot.enabled = false
checkstyleAotTest.enabled = false

checkFormatAot.enabled = false
checkFormatAotTest.enabled = false

formatAot.enabled = false
formatAotTest.enabled = false

tasks.register('openTestResults') {
  description = 'Opens the rest results in the default web browser'
  group = 'Help'
  dependsOn 'build', 'test'

  doLast {
    // Path to test results dir
    def testResultsDir = file("$buildDir/reports/tests/test")

    //Check if tests results directory exits
    if (!testResultsDir.exists()) {
      logger.warn "Test results directory not found: $testResultsDir"
      return
    }

    //Command used to open the test results
    def command = "open $testResultsDir/index.html"

    //Execute the shell command 
    exec {
      commandLine command.split()

    }

  }
}


// Configure the publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // Define groupId, artifactId, and version if they're not defined in the project's gradle.properties or build.gradle
            artifactId = 'my-artifact'
        }
    }
    repositories {
        maven {
            name = 'nexus'
            // URL of your Nexus repository
            url = uri('http://localhost:8084/repository/maven-releases/')
            allowInsecureProtocol = true
            // Set your credentials locally using EXPORT NEXUS_USERNAME & EXPORT NEXUS_PASSWORD
            credentials {
                username = System.getenv('NEXUS_USERNAME') ?: 'admin' // Nexus username 
                password = System.getenv('NEXUS_PASSWORD') ?: 'password' // Nexus Password
            }
        }
    }
}

// Register the upload task
tasks.register('uploadArchives', PublishToMavenRepository) {
  description = 'Publishes artifacts to Nexus repository'
  group = 'Publishing'
  publication = publishing.publications.mavenJava
  repository = publishing.repositories.nexus
}

